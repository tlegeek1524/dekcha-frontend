import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import QuickActions from '../quickaction';

const ManagePoint = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [formData, setFormData] = useState({ customer_info: '', userpoint: '' });
  const [submitLoading, setSubmitLoading] = useState(false);
  const [errors, setErrors] = useState({});
  const [currentUser, setCurrentUser] = useState(null);

  useEffect(() => {
    const checkAuth = async () => {
      console.log('üîç Starting auth check...');
      
      const authToken = getCookie('AuthToken');
      const pinToken = getCookie('pinToken');
      
      console.log('üç™ AuthToken:', authToken ? 'Found' : 'Not found');
      console.log('üç™ PinToken:', pinToken ? 'Found' : 'Not found');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ AuthToken ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!authToken || !pinToken) {
        console.log('‚ùå Missing tokens, redirecting to login...');
        // ‡∏•‡∏ö cookies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        document.cookie = 'AuthToken=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/';
        document.cookie = 'pinToken=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/';
        navigate('/auth/login');
        return;
      }
      
      try {
        console.log('üìû Calling getUserInfo with token...');
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Token
        const userResponse = await getUserInfo(authToken);
        console.log('üë§ User info response:', userResponse);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response structure
        if (!userResponse || userResponse.status !== 'OK' || !userResponse.user) {
          console.log('üö´ Invalid response structure or status not OK');
          alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
          // ‡∏•‡∏ö cookies ‡πÅ‡∏•‡∏∞ redirect
          document.cookie = 'AuthToken=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/';
          document.cookie = 'pinToken=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/';
          navigate('/auth/login');
          return;
        }

        const userData = userResponse.user;
        console.log('üë§ User data:', userData);
        console.log('üîê User role:', userData.role);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô role ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        const allowedRoles = ['admin', 'employee']; // ‡πÄ‡∏û‡∏¥‡πà‡∏° employee ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        if (!allowedRoles.includes(userData.role)) {
          console.log('üö´ User role not allowed:', userData.role);
          alert('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ');
          // ‡∏•‡∏ö cookies ‡πÅ‡∏•‡∏∞ redirect
          document.cookie = 'AuthToken=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/';
          document.cookie = 'pinToken=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/';
          navigate('/auth/login');
          return;
        }
        
        console.log('‚úÖ Auth successful, setting user data');
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const userInfo = {
          id: userData.empid,
          name: userData.name,
          firstname: userData.firstname,
          lastname: userData.lastname,
          empid: userData.empid,
          role: userData.role,
          pincode: userData.pincode
        };
        
        setCurrentUser(userInfo);
        setLoading(false);
        
      } catch (error) {
        console.error('‚ùå Auth error:', error);
        // ‡∏•‡∏ö cookies ‡πÄ‡∏°‡∏∑‡πà‡∏≠ token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        document.cookie = 'AuthToken=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/';
        document.cookie = 'pinToken=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/';
        navigate('/auth/login');
      }
    };

    checkAuth();
  }, [navigate]);

  const getCookie = (name) => {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
  };

  const getUserInfo = async (token) => {
    try {
      const API_URL = import.meta.env.VITE_API_URL;
      console.log('üåê API URL:', API_URL);
      console.log('üîë Using token:', token.substring(0, 10) + '...' + token.substring(token.length - 10));
      
      const response = await fetch(`${API_URL}/auth/verify-token`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response ok:', response.ok);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.log('‚ùå Error response:', errorText);
        throw new Error(`Failed to get user info: ${response.status} ${errorText}`);
      }

      const userInfo = await response.json();
      console.log('üìÑ User info received:', JSON.stringify(userInfo, null, 2));
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡∏°‡∏µ structure ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (userInfo.status === 'OK' && userInfo.user) {
        console.log('‚úÖ Valid response structure');
        return userInfo;
      } else {
        console.log('‚ùå Invalid response structure');
        throw new Error('Invalid response structure');
      }
    } catch (error) {
      console.error('üí• Error fetching user info:', error);
      throw error;
    }
  };

  const handleLogout = () => {
    // ‡∏•‡∏ö cookies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    document.cookie = 'AuthToken=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/';
    document.cookie = 'pinToken=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/';
    navigate('/auth/login');
  };

  const handleAddPoints = async (e) => {
    if (e) e.preventDefault();
    if (submitLoading) return;
    
    console.log('üéØ Starting add points process...');
    setSubmitLoading(true);
    setErrors({});

    const pointNumber = Number(formData.userpoint);
    console.log('üìù Form data:', { customer_info: formData.customer_info, userpoint: pointNumber });

    // Validation
    if (!formData.customer_info.trim()) {
      console.log('‚ùå Validation failed: customer_info empty');
      setErrors({ customer_info: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤' });
      setSubmitLoading(false);
      return;
    }

    if (!formData.userpoint || pointNumber <= 0 || isNaN(pointNumber)) {
      console.log('‚ùå Validation failed: invalid userpoint');
      setErrors({ userpoint: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
      setSubmitLoading(false);
      return;
    }

    const requestData = {
      customer_info: formData.customer_info.trim(),
      userpoint: parseInt(pointNumber)
    };
    console.log('üì§ Request data:', JSON.stringify(requestData, null, 2));

    try {
      const authToken = getCookie('AuthToken');
      if (!authToken) {
        console.log('‚ùå No auth token found');
        alert('Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
        navigate('/auth/login');
        return;
      }

      const API_URL = import.meta.env.VITE_API_URL;
      console.log('üåê Calling API:', `${API_URL}/points/add`);
      console.log('üîë Using token:', authToken.substring(0, 10) + '...' + authToken.substring(authToken.length - 10));
      
      const response = await fetch(`${API_URL}/points/add`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(requestData)
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response ok:', response.ok);

      const result = await response.json();
      console.log('üìÑ Response data:', JSON.stringify(result, null, 2));

      if (response.ok) {
        console.log('‚úÖ Points added successfully');
        alert('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        setFormData({ customer_info: '', userpoint: '' });
      } else {
        console.log('‚ùå API returned error');
        // ‡∏´‡∏≤‡∏Å token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if (response.status === 401) {
          console.log('üö´ Token expired or invalid (401)');
          alert('Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
          handleLogout();
          return;
        }

        if (result.errors) {
          console.log('üìù Setting field errors:', result.errors);
          setErrors(result.errors);
        } else if (result.error) {
          console.log('üìù Setting general error:', result.error);
          setErrors({ general: result.error });
        } else {
          console.log('üìù Unknown error format');
          alert(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°');
        }
      }
    } catch (error) {
      console.error('üí• Network or other error:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API');
    } finally {
      console.log('üèÅ Add points process completed');
      setSubmitLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    const newValue = name === 'userpoint' ? (value === '' ? '' : Number(value)) : value;
    
    setFormData(prev => ({ ...prev, [name]: newValue }));
    
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥...</p>
        </div>
      </div>
    );
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ currentUser ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á loading ‡∏´‡∏£‡∏∑‡∏≠ redirect
  if (!currentUser) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°</h1>
              <p className="text-sm text-gray-500">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-right">
                <p className="text-sm font-medium text-gray-900">
                  {currentUser.firstname} {currentUser.lastname} ({currentUser.name})
                </p>
                <p className="text-xs text-gray-500">
                  {currentUser.empid} ‚Ä¢ {currentUser.role}
                </p>
              </div>
              <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-medium">
                  {currentUser.firstname ? currentUser.firstname.charAt(0).toUpperCase() : currentUser.name.charAt(0).toUpperCase()}
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <QuickActions
          userId={currentUser.id}
          onLogout={handleLogout}
          showLogout={true}
        />

        {/* Main Content */}
        <div className="mt-8 bg-white rounded-lg shadow-sm p-6">
          <div className="max-w-md mx-auto">
            <h2 className="text-xl font-semibold text-gray-900 mb-6 text-center">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°</h2>
            
            <div className="space-y-4">
              {errors.general && (
                <div className="p-3 bg-red-100 border border-red-400 text-red-700 rounded">
                  {errors.general}
                </div>
              )}

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                </label>
                <input
                  type="text"
                  name="customer_info"
                  value={formData.customer_info}
                  onChange={handleChange}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.customer_info ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
                  required
                />
                {errors.customer_info && (
                  <p className="mt-1 text-sm text-red-600">{errors.customer_info}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πâ‡∏°
                </label>
                <input
                  type="number"
                  name="userpoint"
                  value={formData.userpoint}
                  onChange={handleChange}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.userpoint ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°"
                  min="1"
                  required
                />
                {errors.userpoint && (
                  <p className="mt-1 text-sm text-red-600">{errors.userpoint}</p>
                )}
              </div>
            </div>

            <div className="mt-6">
              <button
                type="button"
                onClick={handleAddPoints}
                disabled={submitLoading || !formData.customer_info || !formData.userpoint}
                className={`w-full px-4 py-3 text-white rounded-md font-medium transition-colors ${
                  submitLoading || !formData.customer_info || !formData.userpoint
                    ? 'bg-gray-400 cursor-not-allowed' 
                    : 'bg-blue-600 hover:bg-blue-700'
                }`}
              >
                {submitLoading ? (
                  <div className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°...
                  </div>
                ) : (
                  '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°'
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ManagePoint;